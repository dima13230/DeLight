
-- ===========================================================================================
-- Drag and Drop - Defold Tutorial
-- cursor.script
-- ===========================================================================================

-- init() is executed when the cursor game object is initialized
function init(self)
	-- Enable this cursor GameObject to 'listen' to inputs (mouse & touch)
	msg.post(".", "acquire_input_focus")

	-- In order to set the position of a GameObject using a dynamic collision object
	-- (the cursor) -- you have to disable the collision object
	msg.post("#collisionobject", "disable")

	-- Set instance variables
	self.collision_id = nil     -- id of gameobject which the cursor collided with
	self.dragged_id = nil       -- id of gameobject currently being dragged
	self.dragged_pos = nil
	self.pressed = false
end

-- -------------------------------------------------------------------------------------------
-- final() is executed when the cursor game object is deleted (end-of-game)
function final(self)
	msg.post(".", "release_input_focus")
end

-- -------------------------------------------------------------------------------------------
-- update() is called once each frame; 'dt' is the time difference since the last frame
function update(self, dt)
	self.collision_id = nil
end

-- -------------------------------------------------------------------------------------------
-- on_message() responds to Defold messages which are received by this game object
function on_message(self, message_id, message, sender)
	-- Upon a collision message; set self.collision_id to the id of top-most sprite
	-- pointed to by the cursor object
	if message_id == hash("collision_response") then
		if not self.collision_id or
		go.get_position(self.collision_id).z < message.other_position.z then
			self.collision_id = message.other_id
		end
	end
end

-- -------------------------------------------------------------------------------------------
-- on_input() receives input actions dispatched from the Defold Game Engine
function on_input(self, action_id, action)
	if not action_id or action_id == hash("touch") then
		-- Update the Defold cursor position to the current position of the machine cursor
		local camera_pos = go.get_position("/ball/go")
		local action_pos = vmath.vector3(action.x -380, action.y -330, 0)
		go.set_position(action_pos)

		-- Revise instance status variables; click/touch -- released
		if action.pressed then
			msg.post("#collisionobject", "enable")
			self.pressed = true
		elseif action.released then
			msg.post("#collisionobject", "disable")
			self.pressed = false
			self.dragged_id = nil
			self.dragging = false

			-- Reset Scale to 1.0 on Selected GameObject when released
			local s1 = vmath.vector3(1.0, 1.0, 1.0)
			go.set_scale(s1, self.collision_id)
		end

		-- Upon a Click/Touch -- if the cursor has collided with another GameObject and
		-- is not already dragging another GameObject -- then set dragged_id / dragged_pos
		-- to the new GameObject's id

		if self.pressed and self.collision_id and not self.dragged_id then
			self.dragged_id = self.collision_id
			self.dragged_pos = action_pos

			-- Increase Scale for selected GameObject when selected
			local s2 = vmath.vector3(1.2, 1.2, 1.0)
			go.set_scale(s2, self.collision_id)
		end

		-- Set self.dragging to true if user has clicked a GameObject and moves it
		if self.dragged_id and vmath.length(self.dragged_pos - action_pos) > 20 then
			self.dragging = true
		end

		-- Update the position of a dragged GameObject
		if self.dragging then
			go.set_position(action_pos, self.dragged_id)
		end
	end
end
