go.property("unlit", false)
go.property("normal_map_enabled", false)
go.property("normal_height", 1.0)
go.property("shininess", 32.0)

go.property("scale", vmath.vector3(1, 1, 1))

local lights = require "delight.lights"

function get_pow2(v)	--closest power of 2
	local x = 1
	while x < v do		--While smaller (not eaqual or bigger)
		x = x + x
	end
	return x
end

function init(self)
	self.position = go.get_position()
	self.size = go.get("#sprite", "size") / 2

	go.set("#sprite", "unlit", vmath.vector4(self.unlit and 1 or 0, 0, 0, 0))
	
	if self.normal_map_enabled then
		go.set("#sprite", "shininess", vmath.vector4(self.shininess, 0, 0, 0))
		go.set("#sprite", "normal_height", vmath.vector4(self.normal_height + 1, 0, 0, 0))
		go.set("#sprite", "normal_set", vmath.vector4(self.normal_map_enabled and 1 or 0, 0, 0, 0))
	end

	self.sprite = lights.add_sprite({
		position = self.position,
		size = self.size,
		normal_map = self.normal_map,
		normal_height = self.normal_height,
		shininess = self.shininess
	})	

	local scale = go.get_scale()
	sprite.set_constant("#sprite", "scale", vmath.vector4(self.scale.x, self.scale.y, 1, 1))

	atlas_size = vmath.vector3(get_pow2(self.size.x), get_pow2(self.size.y), 1)					--Get texture size in atlas (closest power of 2)
	texture_ratio = vmath.vector3(self.size.x, self.size.y, 1)		--Easy to read variable
	sprite.set_constant("#sprite", "size", vmath.vector4(texture_ratio.x, texture_ratio.y, 1, 1))
	
	self.offset = {x = 0, y = 0}
end

function final(self)
	lights.remove_sprite(self.sprite)
end

function update(self, dt)
	self.offset.x = self.offset.x + dt / 10

	sprite.set_constant("#sprite", "offset", vmath.vector4(self.offset.x, self.offset.y, 0, 0))
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end